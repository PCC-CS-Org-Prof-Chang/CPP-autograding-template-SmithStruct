// Test definitions. Do NOT edit this file other than instructor!

#include <tuple>

#define CATCH_CONFIG_MAIN // defines main() automatically
#include "catch_amalgamated.hpp"

#include "student.hpp" // student implementations

// =====================
// tests for exercise 1
// ---------------------

// mame and tag of test case
TEST_CASE("Calculate Sign Order Entry Pricing with special wood", "[Smith Shop test]")
{
    Entry entry = {"oak","Hello","red"};
    double dPrice = calcSignEntryPricing(entry);
    CHECK(dPrice == 45);
}

// mame and tag of test case
TEST_CASE("Calculate Sign Order Entry Pricing with regular wood", "[Smith Shop test]")
{
    Entry entry = {"pine","Hello","red"};
    double dPrice = calcSignEntryPricing(entry);
    CHECK(dPrice == 30);
}

TEST_CASE("Calculate Sign Order Entry Pricing with special wood and letter size extra charge", "[Smith Shop test]")
{
    Entry entry = {"oak","HelloWorld","red"};
    double dPrice = calcSignEntryPricing(entry);
    CHECK(dPrice == 57);
}

TEST_CASE("Calculate Sign Order Entry Pricing with special wood and letter color with extra charge", "[Smith Shop test]")
{
    Entry entry = {"oak","Hello","Gold-leaf"};
    double dPrice = calcSignEntryPricing(entry);
    CHECK(dPrice == 57);
}


// =====================
// tests for exercise 2
// ---------------------

// mame and tag of test case
TEST_CASE("Calculate Sign Order Pricing with 2 entries using structs", "[Smith Shop test]")
{
    //std::string entries[2][3] = {{"oak","Hello","red"},{"pine","World","blue"}};
    //double entryCharge[2];
    SignOrder signOrder;
    signOrder.numEntries = 2;
    signOrder.entries[0].woodType = "oak";
    signOrder.entries[0].signCharacters= "Hello";
    signOrder.entries[0].colorOfCharacters = "red";
    signOrder.entries[1].woodType = "pine";
    signOrder.entries[1].signCharacters= "World";
    signOrder.entries[1].colorOfCharacters = "blue";

    calcSignOrderPricing(signOrder); 
    double dTotal = signOrder.entryCharge[0] + signOrder.entryCharge[1];
    //double dTotal = signOrder.signOrderCharge;
    CHECK(dTotal == 75);
}

// =====================
// tests for exercise 3
// ---------------------

// mame and tag of test case
TEST_CASE("Calculate Order Pricing with 2 orders and 2 entries using structs", "[Smith Shop test]")
{
    //std::string orders[2][2][3] = {{{"oak","Hello","red"},{"pine","World","blue"}},{{"oak","HelloWorld","red"},{"pine","World","blue"}}};
    Order orders;
    orders.numOrders = 2;
    orders.signOrders[0].numEntries = 2;
    orders.signOrders[0].entries[0].woodType = "oak";
    orders.signOrders[0].entries[0].signCharacters= "Hello";
    orders.signOrders[0].entries[0].colorOfCharacters = "red";
    orders.signOrders[0].entries[1].woodType = "pine";
    orders.signOrders[0].entries[1].signCharacters= "World";
    orders.signOrders[0].entries[1].colorOfCharacters = "blue";
    orders.signOrders[1].numEntries = 2;
    orders.signOrders[1].entries[0].woodType = "oak";
    orders.signOrders[1].entries[0].signCharacters= "HelloWorld";
    orders.signOrders[1].entries[0].colorOfCharacters = "red";
    orders.signOrders[1].entries[1].woodType = "pine";
    orders.signOrders[1].entries[1].signCharacters= "World";
    orders.signOrders[1].entries[1].colorOfCharacters = "blue";

    calcOrderPrice(orders);
    CHECK(orders.totalCharge == 162);
}
